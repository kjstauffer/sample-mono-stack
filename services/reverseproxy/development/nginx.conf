worker_processes 5;

error_log /app/logs/error_log;

events { worker_connections 1024; }

http {
    include mime.types;

    log_format upstreamlog '[$time_local] $remote_addr - $remote_user - '
                           '$server_name to: $upstream_addr: $request '
                           'upstream_response_time $upstream_response_time '
                           'msec $msec request_time $request_time';

    access_log /app/logs/access_log upstreamlog;

    sendfile on;

    proxy_redirect     off;
    proxy_set_header   Host $host;
    proxy_set_header   X-Real-IP $remote_addr;
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Host $server_name;
    proxy_http_version 1.1;
    proxy_set_header   Upgrade $http_upgrade;
    proxy_set_header   Connection "upgrade";

    ssl_certificate      /etc/nginx/tls/dev.crt;
	ssl_certificate_key  /etc/nginx/tls/dev.key;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'TLS-CHACHA20-POLY1305-SHA256:TLS-AES-256-GCM-SHA384:TLS-AES-128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
    ssl_prefer_server_ciphers on;
    add_header Strict-Transport-Security max-age=15768000;

    # The upstream server names should match the service names in the docker-compose file.

    upstream docker-client-frontend {
        server client-frontend:5000;
    }

    upstream docker-server-frontend {
        # Needs to match the port set in the default config (config/default.ts)
        server server-frontend:3000;
    }

    server {
        listen 80 default_server;
        listen [::]:80 default_server;

        # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl http2;
        server_name frontend.*;
        rewrite ^/(.*)/$ /$1 permanent;

        location /auth {
            proxy_pass         http://docker-server-frontend/auth;
        }

        location / {
            proxy_pass         http://docker-client-frontend/;
        }

        location /static/ {
            root /app;
            expires 30d;
        }
    }

    server {
        listen 443 ssl http2;

        server_name frontend-api.*;

        location / {
            proxy_pass         http://docker-server-frontend/;
        }
    }
}
